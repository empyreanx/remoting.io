0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish', './' ]
2 info using npm@2.7.1
3 info using node@v0.10.25
4 verbose node symlink /usr/bin/node
5 verbose publish [ './' ]
6 silly cache add args [ './', null ]
7 verbose cache add spec ./
8 silly cache add parsed spec { raw: './',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: './',
8 silly cache add   spec: '/home/james/Projects/remoting.io',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory /home/james/.npm/remoting.io/0.1.0/package.tgz not in flight; packing
10 verbose tar pack [ '/home/james/.npm/remoting.io/0.1.0/package.tgz',
10 verbose tar pack   '/home/james/Projects/remoting.io' ]
11 verbose tarball /home/james/.npm/remoting.io/0.1.0/package.tgz
12 verbose folder /home/james/Projects/remoting.io
13 info prepublish remoting.io@0.1.0
14 verbose addLocalTarball adding from inside cache /home/james/.npm/remoting.io/0.1.0/package.tgz
15 silly cache afterAdd remoting.io@0.1.0
16 verbose afterAdd /home/james/.npm/remoting.io/0.1.0/package/package.json not in flight; writing
17 verbose afterAdd /home/james/.npm/remoting.io/0.1.0/package/package.json written
18 silly publish { name: 'remoting.io',
18 silly publish   description: 'Simple and transparent remote procedure calls (RPC) using Engine.IO',
18 silly publish   version: '0.1.0',
18 silly publish   homepage: 'http://remoting.io',
18 silly publish   author: { name: 'James McLean', url: 'http://remoting.io' },
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git://github.com/jrimclean/remoting.io.git' },
18 silly publish   bugs: { url: 'https://github.com/jrimclean/remoting.io/issues' },
18 silly publish   licenses:
18 silly publish    [ { type: 'MIT',
18 silly publish        url: 'git://github.com/jrimclean/blob/master/LICENSE.md' } ],
18 silly publish   main: 'index.js',
18 silly publish   scripts: { test: 'grunt test' },
18 silly publish   devDependencies:
18 silly publish    { 'grunt-contrib-jshint': '~0.6.4',
18 silly publish      'grunt-contrib-nodeunit': '~0.2.0',
18 silly publish      'grunt-contrib-watch': '~0.5.3',
18 silly publish      grunt: '~0.4.5',
18 silly publish      mocha: '~2.1.0',
18 silly publish      'expect.js': '~0.3.1',
18 silly publish      'grunt-mocha-test': '~0.12.7',
18 silly publish      'component-emitter': '~1.2.0' },
18 silly publish   keywords: [],
18 silly publish   dependencies: { 'es6-promise': '~2.0.1' },
18 silly publish   readme: '# Remoting.IO\n\nSimple and transparent remote procedure calls (RPC) using `Engine.IO`.\n\nThe client repository is located [here](https://github.com/jrimclean/remoting.io-client).\n\n## About\n\n`Remoting.IO` allows services to export methods remotely. Services are simply plain prototypical Javascript classes which define a number of methods that can be called remotely.\n\nBecause `Engine.IO` is connection oriented, services are stateful. This means session data can be persisted across services and method invocations. `Remoting.IO` provides a `session` hash map that is injected into instances of services for exactly this purpose.\n\n`Remoting.IO` is able to handle both synchronous and asynchronous methods. The only constraint is that asynchronous methods must return an ES6 promise.\n\nBecause `Remoting.IO` is based on `Engine.IO`, it inherits the strengths of `Engine.IO`, such as multiple transports and resilience in the presence of proxies, load balancers, and firewalls.\n\n## Installation\nInstall `Engine.IO` and `Remoting.IO` with:\n\n\tnpm install engine.io\n\tnpm install remoting.io\n\n## Server Example\n\nDefine a service as follows:\n\n```js\nfunction TestService(arg1, arg2) {\n\tthis.arg1 = arg1;\n\tthis.session[\'arg2\'] = arg2;\n}\n\nTestService.prototype.test1 = function (str1, str2) {\n\treturn str1 + str2;\n};\n\nTestService.prototype.test2 = function () {\n\tvar self = this;\n\n\treturn new Promise(function (resolve) {\n\t\tresolve(self.arg1 + self.session[\'arg2\']);\n\t});\n};\n\nTestService.exports = [ \'test1\', \'test2\' ];\n```\n\nSetup the RPC server as follows:\n\n```js\nvar engine = require(\'engine.io\');\nvar remoting = require(\'remoting.io\');\n\nvar socketServer = engine.listen(80);\nvar rpcServer = remoting(socketServer);\n\nrpcServer.addService(\'TestService\', TestService, [\'Hello\', \'World!\']);\nrpcServer.start();\n```\n\nWhen a client connects and requests an instance of `TestService`, `\'Hello\'` and `\'World!\'` will be passed into `arg1` and `arg2` of the service constructor respectively.\n\n## Client Example\n\nUsing the server example above, we can remotely request an instance of the service and call it\'s method as follows:\n\n```js\nvar socket = eio(\'ws://localhost\');\nvar client = rio(socket);\n\t\nclient.proxy(\'TestService\').then(function (testService) {\n\ttestService.test1(\'Hello\', \'World!\').then(function (result) {\n\t\tconsole.log(result);\n\t\ttestService.release();\n\t});\t\n});\n```\n\nThis example assumes that `engine.io.js` and `remoting.io.js` have been loaded into the DOM. \n\nUsing Browserify:\n\n```js\nvar socket = require(\'engine.io-client\')(\'ws://localhost\');\nvar client = require(\'remoting.io-client\')(socket);\n\t\nclient.proxy(\'TestService\').then(function (testService) {\n\ttestService.test1(\'Hello\', \'World!\').then(function (result) {\n\t\tconsole.log(result);\n\t\ttestService.release();\n\t});\t\n});\n```\n\n## API\n\n#### Server\n\n- **constructor**\n\t- Initializes the server\n\t- **Parameters:**\n\t\t- `socketServer`: an `Engine.IO` (or equivalent) server instance\n\t\t\n- **start**\n\t- Starts the RPC server\n\t\n- **stop**\n\t- Stops the RPC server\n\t\n- **addService**\n\t- Registers an RPC service\n\t- **Parameters:**\n\t\t- `name`: The service identifier\n\t\t- `service`: The service class\n\t\t- `args`: Arguments that are passed to the service constructor when a new instance of the service is created\n\n- **removeService**\n\t- Unregisters an RPC service\n\t- **Parameters:**\n\t\t- `name`: The service identifier\n\nHead over to the `Remoting.IO` [client](https://github.com/jrimclean/remoting.io-client) repository for instructions on how to use the client.\n\n## License\nCopyright (c) 2015 James McLean  \nLicensed under the MIT license.\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '062a911515ff5aea5787859098f2a72b823ec6b7',
18 silly publish   _id: 'remoting.io@0.1.0',
18 silly publish   _shasum: 'e623dfedecd4e230dfccae56eac3c1143fabadaa',
18 silly publish   _from: '.' }
19 silly mapToRegistry name remoting.io
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/remoting.io
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /home/james/.npm/remoting.io/0.1.0/package.tgz
25 verbose request uri https://registry.npmjs.org/remoting.io
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 10:34:12
28 verbose request id c357fb34c952e385
29 http request PUT https://registry.npmjs.org/remoting.io
30 http 403 https://registry.npmjs.org/remoting.io
31 verbose headers { date: 'Thu, 19 Mar 2015 14:33:49 GMT',
31 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
31 verbose headers   'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=60',
31 verbose headers   'content-length': '7542',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   'x-served-by': 'cache-jfk1021-JFK',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1426775629.762732,VS0,VE181',
31 verbose headers   'keep-alive': 'timeout=10, max=50',
31 verbose headers   connection: 'Keep-Alive' }
32 verbose request invalidating /home/james/.npm/registry.npmjs.org/remoting.io on PUT
33 error publish Failed PUT 403
34 verbose stack Error: forbidden cannot modify pre-existing version: 0.1.0
34 verbose stack old={"name":"remoting.io","description":"Simple and transparent remote procedure calls using Engine.IO.","version":"0.1.0","homepage":"http://remoting.io","author":{"name":"James McLean","url":"http://remoting.io"},"repository":{"type":"git","url":"git://github.com/jrimclean/remoting.io.git"},"bugs":{"url":"https://github.com/jrimclean/remoting.io/issues"},"licenses":[{"type":"MIT","url":"git://github.com/jrimclean/blob/master/LICENSE.md"}],"main":"index.js","scripts":{"test":"grunt test"},"devDependencies":{"grunt-contrib-jshint":"~0.6.4","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.3","grunt":"~0.4.5","mocha":"~2.1.0","expect.js":"~0.3.1","grunt-mocha-test":"~0.12.7","component-emitter":"~1.2.0"},"keywords":[],"dependencies":{"es6-promise":"~2.0.1"},"gitHead":"1987678dfd9709e5916901b0a62e3b1a238e9fc8","_id":"remoting.io@0.1.0","_shasum":"2414a5ec7eba28b25a32df332e93ee28974f79e6","_from":".","_npmVersion":"2.7.1","_nodeVersion":"0.10.25","_npmUser":{"name":"jrimclean","email":"jrimclean@gmail.com"},"maintainers":[{"name":"jrimclean","email":"jrimclean@gmail.com"}],"dist":{"shasum":"2414a5ec7eba28b25a32df332e93ee28974f79e6","tarball":"http://registry.npmjs.org/remoting.io/-/remoting.io-0.1.0.tgz"}}
34 verbose stack new={"name":"remoting.io","description":"Simple and transparent remote procedure calls (RPC) using Engine.IO","version":"0.1.0","homepage":"http://remoting.io","author":{"name":"James McLean","url":"http://remoting.io"},"repository":{"type":"git","url":"git://github.com/jrimclean/remoting.io.git"},"bugs":{"url":"https://github.com/jrimclean/remoting.io/issues"},"licenses":[{"type":"MIT","url":"git://github.com/jrimclean/blob/master/LICENSE.md"}],"main":"index.js","scripts":{"test":"grunt test"},"devDependencies":{"grunt-contrib-jshint":"~0.6.4","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.3","grunt":"~0.4.5","mocha":"~2.1.0","expect.js":"~0.3.1","grunt-mocha-test":"~0.12.7","component-emitter":"~1.2.0"},"keywords":[],"dependencies":{"es6-promise":"~2.0.1"},"readme":"# Remoting.IO\u000a\u000aSimple and transparent remote procedure calls (RPC) using `Engine.IO`.\u000a\u000aThe client repository is located [here](https://github.com/jrimclean/remoting.io-client).\u000a\u000a## About\u000a\u000a`Remoting.IO` allows services to export methods remotely. Services are simply plain prototypical Javascript classes which define a number of methods that can be called remotely.\u000a\u000aBecause `Engine.IO` is connection oriented, services are stateful. This means session data can be persisted across services and method invocations. `Remoting.IO` provides a `session` hash map that is injected into instances of services for exactly this purpose.\u000a\u000a`Remoting.IO` is able to handle both synchronous and asynchronous methods. The only constraint is that asynchronous methods must return an ES6 promise.\u000a\u000aBecause `Remoting.IO` is based on `Engine.IO`, it inherits the strengths of `Engine.IO`, such as multiple transports and resilience in the presence of proxies, load balancers, and firewalls.\u000a\u000a## Installation\u000aInstall `Engine.IO` and `Remoting.IO` with:\u000a\u000a\u0009npm install engine.io\u000a\u0009npm install remoting.io\u000a\u000a## Server Example\u000a\u000aDefine a service as follows:\u000a\u000a```js\u000afunction TestService(arg1, arg2) {\u000a\u0009this.arg1 = arg1;\u000a\u0009this.session['arg2'] = arg2;\u000a}\u000a\u000aTestService.prototype.test1 = function (str1, str2) {\u000a\u0009return str1 + str2;\u000a};\u000a\u000aTestService.prototype.test2 = function () {\u000a\u0009var self = this;\u000a\u000a\u0009return new Promise(function (resolve) {\u000a\u0009\u0009resolve(self.arg1 + self.session['arg2']);\u000a\u0009});\u000a};\u000a\u000aTestService.exports = [ 'test1', 'test2' ];\u000a```\u000a\u000aSetup the RPC server as follows:\u000a\u000a```js\u000avar engine = require('engine.io');\u000avar remoting = require('remoting.io');\u000a\u000avar socketServer = engine.listen(80);\u000avar rpcServer = remoting(socketServer);\u000a\u000arpcServer.addService('TestService', TestService, ['Hello', 'World!']);\u000arpcServer.start();\u000a```\u000a\u000aWhen a client connects and requests an instance of `TestService`, `'Hello'` and `'World!'` will be passed into `arg1` and `arg2` of the service constructor respectively.\u000a\u000a## Client Example\u000a\u000aUsing the server example above, we can remotely request an instance of the service and call it's method as follows:\u000a\u000a```js\u000avar socket = eio('ws://localhost');\u000avar client = rio(socket);\u000a\u0009\u000aclient.proxy('TestService').then(function (testService) {\u000a\u0009testService.test1('Hello', 'World!').then(function (result) {\u000a\u0009\u0009console.log(result);\u000a\u0009\u0009testService.release();\u000a\u0009});\u0009\u000a});\u000a```\u000a\u000aThis example assumes that `engine.io.js` and `remoting.io.js` have been loaded into the DOM. \u000a\u000aUsing Browserify:\u000a\u000a```js\u000avar socket = require('engine.io-client')('ws://localhost');\u000avar client = require('remoting.io-client')(socket);\u000a\u0009\u000aclient.proxy('TestService').then(function (testService) {\u000a\u0009testService.test1('Hello', 'World!').then(function (result) {\u000a\u0009\u0009console.log(result);\u000a\u0009\u0009testService.release();\u000a\u0009});\u0009\u000a});\u000a```\u000a\u000a## API\u000a\u000a#### Server\u000a\u000a- **constructor**\u000a\u0009- Initializes the server\u000a\u0009- **Parameters:**\u000a\u0009\u0009- `socketServer`: an `Engine.IO` (or equivalent) server instance\u000a\u0009\u0009\u000a- **start**\u000a\u0009- Starts the RPC server\u000a\u0009\u000a- **stop**\u000a\u0009- Stops the RPC server\u000a\u0009\u000a- **addService**\u000a\u0009- Registers an RPC service\u000a\u0009- **Parameters:**\u000a\u0009\u0009- `name`: The service identifier\u000a\u0009\u0009- `service`: The service class\u000a\u0009\u0009- `args`: Arguments that are passed to the service constructor when a new instance of the service is created\u000a\u000a- **removeService**\u000a\u0009- Unregisters an RPC service\u000a\u0009- **Parameters:**\u000a\u0009\u0009- `name`: The service identifier\u000a\u000aHead over to the `Remoting.IO` [client](https://github.com/jrimclean/remoting.io-client) repository for instructions on how to use the client.\u000a\u000a## License\u000aCopyright (c) 2015 James McLean  \u000aLicensed under the MIT license.\u000a","readmeFilename":"README.md","gitHead":"062a911515ff5aea5787859098f2a72b823ec6b7","_id":"remoting.io@0.1.0","_shasum":"e623dfedecd4e230dfccae56eac3c1143fabadaa","_from":".","_npmVersion":"2.7.1","_nodeVersion":"0.10.25","_npmUser":{"name":"jrimclean","email":"jrimclean@gmail.com"},"maintainers":[{"name":"jrimclean","email":"jrimclean@gmail.com"}],"dist":{"shasum":"e623dfedecd4e230dfccae56eac3c1143fabadaa","tarball":"http://registry.npmjs.org/remoting.io/-/remoting.io-0.1.0.tgz"}}: remoting.io
34 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:254:14)
34 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:178:14)
34 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:344:22)
34 verbose stack     at Request.EventEmitter.emit (events.js:98:17)
34 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1239:14)
34 verbose stack     at Request.EventEmitter.emit (events.js:117:20)
34 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1187:12)
34 verbose stack     at IncomingMessage.EventEmitter.emit (events.js:117:20)
34 verbose stack     at _stream_readable.js:920:16
34 verbose stack     at process._tickCallback (node.js:415:13)
35 verbose statusCode 403
36 verbose pkgid remoting.io
37 verbose cwd /home/james/Projects/remoting.io
38 error Linux 3.13.0-24-generic
39 error argv "node" "/usr/local/bin/npm" "publish" "./"
40 error node v0.10.25
41 error npm  v2.7.1
42 error code E403
43 error forbidden cannot modify pre-existing version: 0.1.0
43 error old={"name":"remoting.io","description":"Simple and transparent remote procedure calls using Engine.IO.","version":"0.1.0","homepage":"http://remoting.io","author":{"name":"James McLean","url":"http://remoting.io"},"repository":{"type":"git","url":"git://github.com/jrimclean/remoting.io.git"},"bugs":{"url":"https://github.com/jrimclean/remoting.io/issues"},"licenses":[{"type":"MIT","url":"git://github.com/jrimclean/blob/master/LICENSE.md"}],"main":"index.js","scripts":{"test":"grunt test"},"devDependencies":{"grunt-contrib-jshint":"~0.6.4","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.3","grunt":"~0.4.5","mocha":"~2.1.0","expect.js":"~0.3.1","grunt-mocha-test":"~0.12.7","component-emitter":"~1.2.0"},"keywords":[],"dependencies":{"es6-promise":"~2.0.1"},"gitHead":"1987678dfd9709e5916901b0a62e3b1a238e9fc8","_id":"remoting.io@0.1.0","_shasum":"2414a5ec7eba28b25a32df332e93ee28974f79e6","_from":".","_npmVersion":"2.7.1","_nodeVersion":"0.10.25","_npmUser":{"name":"jrimclean","email":"jrimclean@gmail.com"},"maintainers":[{"name":"jrimclean","email":"jrimclean@gmail.com"}],"dist":{"shasum":"2414a5ec7eba28b25a32df332e93ee28974f79e6","tarball":"http://registry.npmjs.org/remoting.io/-/remoting.io-0.1.0.tgz"}}
43 error new={"name":"remoting.io","description":"Simple and transparent remote procedure calls (RPC) using Engine.IO","version":"0.1.0","homepage":"http://remoting.io","author":{"name":"James McLean","url":"http://remoting.io"},"repository":{"type":"git","url":"git://github.com/jrimclean/remoting.io.git"},"bugs":{"url":"https://github.com/jrimclean/remoting.io/issues"},"licenses":[{"type":"MIT","url":"git://github.com/jrimclean/blob/master/LICENSE.md"}],"main":"index.js","scripts":{"test":"grunt test"},"devDependencies":{"grunt-contrib-jshint":"~0.6.4","grunt-contrib-nodeunit":"~0.2.0","grunt-contrib-watch":"~0.5.3","grunt":"~0.4.5","mocha":"~2.1.0","expect.js":"~0.3.1","grunt-mocha-test":"~0.12.7","component-emitter":"~1.2.0"},"keywords":[],"dependencies":{"es6-promise":"~2.0.1"},"readme":"# Remoting.IO\u000a\u000aSimple and transparent remote procedure calls (RPC) using `Engine.IO`.\u000a\u000aThe client repository is located [here](https://github.com/jrimclean/remoting.io-client).\u000a\u000a## About\u000a\u000a`Remoting.IO` allows services to export methods remotely. Services are simply plain prototypical Javascript classes which define a number of methods that can be called remotely.\u000a\u000aBecause `Engine.IO` is connection oriented, services are stateful. This means session data can be persisted across services and method invocations. `Remoting.IO` provides a `session` hash map that is injected into instances of services for exactly this purpose.\u000a\u000a`Remoting.IO` is able to handle both synchronous and asynchronous methods. The only constraint is that asynchronous methods must return an ES6 promise.\u000a\u000aBecause `Remoting.IO` is based on `Engine.IO`, it inherits the strengths of `Engine.IO`, such as multiple transports and resilience in the presence of proxies, load balancers, and firewalls.\u000a\u000a## Installation\u000aInstall `Engine.IO` and `Remoting.IO` with:\u000a\u000a\u0009npm install engine.io\u000a\u0009npm install remoting.io\u000a\u000a## Server Example\u000a\u000aDefine a service as follows:\u000a\u000a```js\u000afunction TestService(arg1, arg2) {\u000a\u0009this.arg1 = arg1;\u000a\u0009this.session['arg2'] = arg2;\u000a}\u000a\u000aTestService.prototype.test1 = function (str1, str2) {\u000a\u0009return str1 + str2;\u000a};\u000a\u000aTestService.prototype.test2 = function () {\u000a\u0009var self = this;\u000a\u000a\u0009return new Promise(function (resolve) {\u000a\u0009\u0009resolve(self.arg1 + self.session['arg2']);\u000a\u0009});\u000a};\u000a\u000aTestService.exports = [ 'test1', 'test2' ];\u000a```\u000a\u000aSetup the RPC server as follows:\u000a\u000a```js\u000avar engine = require('engine.io');\u000avar remoting = require('remoting.io');\u000a\u000avar socketServer = engine.listen(80);\u000avar rpcServer = remoting(socketServer);\u000a\u000arpcServer.addService('TestService', TestService, ['Hello', 'World!']);\u000arpcServer.start();\u000a```\u000a\u000aWhen a client connects and requests an instance of `TestService`, `'Hello'` and `'World!'` will be passed into `arg1` and `arg2` of the service constructor respectively.\u000a\u000a## Client Example\u000a\u000aUsing the server example above, we can remotely request an instance of the service and call it's method as follows:\u000a\u000a```js\u000avar socket = eio('ws://localhost');\u000avar client = rio(socket);\u000a\u0009\u000aclient.proxy('TestService').then(function (testService) {\u000a\u0009testService.test1('Hello', 'World!').then(function (result) {\u000a\u0009\u0009console.log(result);\u000a\u0009\u0009testService.release();\u000a\u0009});\u0009\u000a});\u000a```\u000a\u000aThis example assumes that `engine.io.js` and `remoting.io.js` have been loaded into the DOM. \u000a\u000aUsing Browserify:\u000a\u000a```js\u000avar socket = require('engine.io-client')('ws://localhost');\u000avar client = require('remoting.io-client')(socket);\u000a\u0009\u000aclient.proxy('TestService').then(function (testService) {\u000a\u0009testService.test1('Hello', 'World!').then(function (result) {\u000a\u0009\u0009console.log(result);\u000a\u0009\u0009testService.release();\u000a\u0009});\u0009\u000a});\u000a```\u000a\u000a## API\u000a\u000a#### Server\u000a\u000a- **constructor**\u000a\u0009- Initializes the server\u000a\u0009- **Parameters:**\u000a\u0009\u0009- `socketServer`: an `Engine.IO` (or equivalent) server instance\u000a\u0009\u0009\u000a- **start**\u000a\u0009- Starts the RPC server\u000a\u0009\u000a- **stop**\u000a\u0009- Stops the RPC server\u000a\u0009\u000a- **addService**\u000a\u0009- Registers an RPC service\u000a\u0009- **Parameters:**\u000a\u0009\u0009- `name`: The service identifier\u000a\u0009\u0009- `service`: The service class\u000a\u0009\u0009- `args`: Arguments that are passed to the service constructor when a new instance of the service is created\u000a\u000a- **removeService**\u000a\u0009- Unregisters an RPC service\u000a\u0009- **Parameters:**\u000a\u0009\u0009- `name`: The service identifier\u000a\u000aHead over to the `Remoting.IO` [client](https://github.com/jrimclean/remoting.io-client) repository for instructions on how to use the client.\u000a\u000a## License\u000aCopyright (c) 2015 James McLean  \u000aLicensed under the MIT license.\u000a","readmeFilename":"README.md","gitHead":"062a911515ff5aea5787859098f2a72b823ec6b7","_id":"remoting.io@0.1.0","_shasum":"e623dfedecd4e230dfccae56eac3c1143fabadaa","_from":".","_npmVersion":"2.7.1","_nodeVersion":"0.10.25","_npmUser":{"name":"jrimclean","email":"jrimclean@gmail.com"},"maintainers":[{"name":"jrimclean","email":"jrimclean@gmail.com"}],"dist":{"shasum":"e623dfedecd4e230dfccae56eac3c1143fabadaa","tarball":"http://registry.npmjs.org/remoting.io/-/remoting.io-0.1.0.tgz"}}: remoting.io
44 error If you need help, you may report this error at:
44 error     <https://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
